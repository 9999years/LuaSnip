*luasnip.txt*       For Neovim 0.5                       Last change: 2021 April 8
            __                       ____                          ~
           /\ \                     /\  _`\           __           ~
           \ \ \      __  __     __ \ \,\L\_\    ___ /\_\  _____   ~
            \ \ \  __/\ \/\ \  /'__`\\/_\__ \  /' _ `\/\ \/\ '__`\ ~
             \ \ \L\ \ \ \_\ \/\ \L\.\_/\ \L\ \/\ \/\ \ \ \ \ \L\ \~
              \ \____/\ \____/\ \__/.\_\ `\____\ \_\ \_\ \_\ \ ,__/~
               \/___/  \/___/  \/__/\/_/\/_____/\/_/\/_/\/_/\ \ \/ ~
                                                             \ \_\ ~
                                                              \/_/ ~

================================================================================
CONTENTS                                                        *luasnip-contents*

	Intro ........................................................ |luasnip-intro|
	Snippets ......................................................... |luasnip-s|
	TextNode ......................................................... |luasnip-t|
	InsertNode ....................................................... |luasnip-i|
	FunctionNode ..................................................... |luasnip-f|
	ChoiceNode ....................................................... |luasnip-c|
	SnippetNode ..................................................... |luasnip-sn|
	DynamicNode ...................................................... |luasnip-d|

================================================================================

INTRO                                                              *luasnip-intro*

Luasnip is a snippet-engine written entirely in lua. It has some great features
like inserting text (|luasnip-f|) or nodes (|luasnip-d|) based on user input,
parsing lsp-syntax and switching nodes (|luasnip-c|).

All code-snippets in this help assume that >

	local ls = require'luasnip'
	local s = ls.s
	local sn = ls.sn
	local t = ls.t
	local i = ls.i
	local f = ls.f
	local c = ls.c
	local d = ls.d
<
================================================================================

SNIPPETS                                                               *luasnip-s*

The most direct way to define snippets is `s`: 
>
	s({trig='trigger'}, {
	i(0)
	})

(This Snippet is useless beyond being a minimal example)

`s` accepts, as the first argument, a table with the following possible
entries:

	`trig`        string      Trigger, Plain text by default    Required
	`name`        String      Name, used by other plugins       Optional, `trig`
	`dscr`        String      Description, used by other        Optional, `trig`
	                        plugins
	`wordTrig`    Boolean     If true, the snippet is only      Optional, `false`
	                        expanded if the word (`[%w_]+`)
	                        before the cursor matches the
	                        trigger entirely
	`regTrig`    Boolean      If true, `trig` is interpreted      Optional, `false`
                            as a lua-pattern

The second argument to `s` is a table containing all nodes that belong to the
snippet, at least one of which has to be an `i(0)` node.

Snippets contain some interesting tables, eg. `snippet.env` contains variables
used in the LSP-protocol like `TM_CURRENT_LINE` or `TM_FILENAME` or
`snippet.captures`, where capture-groups of regex-triggers are stored. These
tables are primarily useful in dynamic/functionNodes, where the snippet is
passed to the generating function.

Snippets that should be loaded for all files must be put into the
`ls.snippets.all`-table, those only for a specific filetype `ft` belong in
`ls.snippets.ft`.

================================================================================

TEXTNODE                                                               *luasnip-t*

The most simple kind of node; just text.
>
	s({trig='trigger'}, {
		t({"Wow! Text!"}),
		i(0)
	})
<
This Snippet expands to
>
    Wow! Text!|
<
, where `|` is the cursor.
Multiline-strings can be defined by creating multiple entries inside the table:
>
	s({trig='trigger'}, {
		t({"Wow! Text!", "And another line."}),
		i(0)
	})
<
================================================================================

INSERTNODE                                                             *luasnip-i*

These Nodes can be jumped to- and from, the functionality is best demonstrated
with an example:
>
	s({trig='trigger'}, {
		t({"After jumping forward once cursor is here ->"}), i(2),
		t({"", "After expanding the cursor is here ->"}), i(1),
		t({"", "After jumping once more the snippet is exited there ->"}), i(0),
	})
<
It's possible to have easy-to-overwrite text inside an InsertNode initially:
>
	s({trig='trigger'}, {
		i(1, {"This text is SELECTed after expanding the snippet."}),
		i(0),
	})
<
This initial text is defined the same way as textNodes, eg. can be multiline.

================================================================================

FUNCTIONNODE                                                           *luasnip-f*

Function Nodes insert text based on the content of other nodes using a
user-defined function: 
>
	s({trig = "trig"}, {
		i(1)
		f(function(args, user_arg_1) return {args[1][1] .. user_arg_1} end,
			{1},
			"Will be appended to text from i(0)"),
		i(0)
	})
<
The first parameter of `f` is the function. Its parameters are
	1.: a table of text and the surrounding snippet (ie.
	`{{line1}, {line1, line2}, snippet}`).
	The Snippet is included here, as it allows access to anything that could be
	useful in functionNodes (ie.  `snippet.env` or `snippet.captures`, which
	contains capture groups of regex-triggered snippets).

	2.: Any parameters passed to `f` behind the second (included to more easily
	reuse functions, ie. ternary if based on text in an insertNode).

The second parameter is a table of indizes of jumpable nodes whose text is
passed to the function. The table may be empty, in this case the function is
evaluated once upon snippet-expansion.

Examples:
	Use captures from the regex-trigger using a functionNode:
>
	s({trig = "b(%d)", regTrig = true, wordTrig = true}, {
		f(function(args) return
			{"Captured Text: " .. args[1].captures[1] .. "."} end, {}),
		i(0)
	})
<
================================================================================

CHOICENODE                                                             *luasnip-c*

ChoiceNodes allow choosing between multiple nodes.
>
	s({trig = "trig"}, {
		c(1, {
			t({"Ugh boring, a text node"}),
			i(nil, {"At least I can edit something now..."}),
			f(function(args) return {"Still only counts as text!!"} end, {})
		}), i(0)
	})

`c()` expects as it first arg, as with any jumpable node, its position in the
jumplist, and as its second a table with nodes, the choices.

Jumpable nodes that normally expect an index as their first parameter don't
need one inside a choiceNode; their index is the same as the choiceNodes'.

================================================================================

SNIPPETNODE                                                           *luasnip-sn*

SnippetNodes directly insert their contents into the surrounding snippet.
This is useful for choiceNodes, which only accept one child, or dynamicNodes,
where nodes are created at runtime and inserted as a snippetNode.

Syntax is similar to snippets, however, where snippets require a table
specifying when to expand, snippetNodes, similar to insertNodes, expect a
number, as they too are jumpable:
>
	s({trig = "trig"}, {
		sn(1, {
			t({"basically just text "}),
			i(1, {"And an insertNode."})
		}),
		i(0)
	})
<

Note that snippetNodes don't expect an `i(0)`.

vim:tw=78:ts=4:ft=help:norl:
